ACE EXPLOIT

This file sets up the data and code for Melee's ACE (Arbitrary Code Execution)
save file exploit. It is required in order to run custom code from a save file.
--------------------------------------------------------------------------------

!begin
# Make the first nametag so long that it overflows into the stack's return pointer
!loc 8045d850
DD064bDD
DD064cDD DD064dDD DD064eDD DD064fDD
DD0650DD DD0651DD DD0652DD DD0653DD
DD0654DD DD0655DD DD0656DD DD0657DD
DD0658DD DD0659DD DD065aDD DD065bDD
DD065cDD DD065dDD DD065eDD DD065fDD
DD0660DD DD0661DD DD0662DD DD0663DD
DD0664DD DD0665DD DD0666DD DD0667DD
DD0668DD DD0669DD DD066aDD DD066bDD
DD066cDD DD066dDD DD066eDD DD066fDD
DD0670DD DD0671DD DD0672DD 804eeac8
8045d930 DD0675DD DD0676DD DD0677DD
DD0678DD DD0679DD DD067aDD DD067bDD
DD067cDD DD067dDD DD067eDD DD067fDD
804ee8f8 8045d930 00000000

# This forces execution to branch to 8045d930 instead of back to the nametag
# function. Better yet, 8045d930 is at a different offset in each version
# of Melee, because the save file loads into slightly different spots.
# This means we can conveniently run different code for each Melee version
# using only one save file.
#
# v1.02: 8045d930
# v1.01: 8045e610
# v1.00: 8045f8f8

# --------------
# v1.02 Loader 1
# --------------
!loc 8045d930
!asm

lis r11,0x8046
ori r11,r11,0xaf00
lis r12,0x8023
ori r12,r12,0x9e9c
lis r3,0x8043
lwz r4,0x2f74(r3)
cmpwi r4,0			#is a memcard save in progress?
beq 0x10
stw r11,0x2f74(r3)	#if so, run loader2 when it's done and return
mtctr r12
bctr
mtctr r11			#if not, run loader2 now and set LR to return
mtlr r12
bctr

!asmend

# --------------
# v1.01 Loader 1
# --------------
!loc 8045e610
!asm

lis r11,0x8046
ori r11,r11,0xa020
lis r12,0x8023
ori r12,r12,0x9700
lis r3,0x8043
lwz r4,0x2294(r3)
cmpwi r4,0			#is a memcard save in progress?
beq 0x10
stw r11,0x2294(r3)	#if so, run loader2 when it's done and return
mtctr r12
bctr
mtctr r11			#if not, run loader2 now and set LR to return
mtlr r12
bctr

!asmend

# --------------
# v1.00 Loader 1
# --------------
!loc 8045f8f8
!asm

lis r11,0x8046
ori r11,r11,0x8b38
lis r12,0x8023
ori r12,r12,0x8b90
lis r3,0x8043
lwz r4,0x0fb4(r3)
cmpwi r4,0			#is a memcard save in progress?
beq 0x10
stw r11,0x0fb4(r3)	#if so, run loader2 when it's done and return
mtctr r12
bctr
mtctr r11			#if not, run loader2 now and set LR to return
mtlr r12
bctr

!asmend


# Now, we branch to the Loader 2 function and run whatever code we want before
# rebooting the game. In this example, we iterate through a datacopy table
# that conveniently lets us copy our custom data to other places in Melee
# memory, away from the save data region. (See datacopy_table.mgc)
# Then, we run the Gecko codehandler one time to apply our Gecko codes.
# Unlike Gecko OS and Nintendont, we don't hook the codehandler to run every
# frame, so keep that in mind if your codes require that.

# --------------
# v1.02 Loader 2
# --------------
!loc 8046af00
!asm

mflr r0
stw r0,0x4(sp)
stwu sp,-0x20(sp)
stw r31,0x1c(sp)
stw r30,0x18(sp)
stw r29,0x14(sp)
stw r28,0x10(sp)

#r7: pointer to strcpy table
lis r7,0x8046
ori r7,r7,0x0a64

STRCPYLOOP:
lwz r4,0(r7)	#source
cmpwi r4,0
beq CODEHANDLER
lwz r3,4(r7)	#destination
lwz r5,8(r7)	#size

#copy string
subi r4,r4,4
subi r6,r3,4
addi r5,r5,4
b 0xc
lwzu r0,0x4(r4)
stwu r0,0x4(r6)
subic. r5,r5,4
bne+ -0xc

#next string
addi r7,r7,0xc
b STRCPYLOOP

CODEHANDLER:

#Expand input HUD
lis r12,0x8045
ori r12,r12,0xda00
mtctr r12
bctrl

#Hook codehandler (we don't do this anymore lol)
lis r3,0x8037
ori r3,r3,0x62a0
lis r4,0x4be1
ori r4,r4,0xae41
nop #stw r4,0(r3)
li r4,0
icbi r4,r3
sync
isync

#Zero fill entire nametag area
lis r3,0x8045
ori r3,r3,0xd850
li r4,0
li r5,0
ori r5,r5,0xc344
lis r12,0x8000
ori r12,r12,0x3130
mtctr r12
bctrl

#Init nametag data
li r3,2
lis r12,0x8015
ori r12,r12,0xf600
mtctr r12
bctrl

#Load data
lis r12,0x8001
ori r12,r12,0xcbbc
mtctr r12
bctrl

#Run codehandler once
lis r12,0x8019
ori r12,r12,0x10e4
li r4,0
icbi r4,r12
sync
isync
mtctr r12
bctrl

#Clear cache
lis r3,0x8000
lis r4,0x3c
lis r12,0x8032
ori r12,r12,0x8f50
mtctr r12
bctrl

li r3,6
lis r12,0x801a
ori r12,r12,0x428c
mtctr r12
bctrl

li r0,5
sth r0,-0x4ad8(r13)
lwz r3,-0x4f80(r13)
lwz r3,0x8(r3)
li r30,0
stb r30,0(r3)

# Obsolete - used for pre-order copy name entry
# li r0,5
# sth r0,-0x4ad8(r13)
# lwz r3,-0x4f80(r13)
# lwz r4,0x8(r3)
# cmpwi r4,0
# beq DEBUGMENU
# li r30,0
# stb r30,0(r4)
# b END
# 
# DEBUGMENU:
# #We're coming from the debug menu
# li r3,0
# lis r12,0x801a
# ori r12,r12,0x42f8
# mtctr r12
# bctrl

END:
lis r12,0x801a
ori r12,r12,0x4b60
mtctr r12
bctrl

lwz r0,0x24(sp)
lwz r31,0x1c(sp)
lwz r30,0x18(sp)
lwz r29,0x14(sp)
lwz r28,0x10(sp)
addi sp,sp,0x20
mtlr r0
blr

!asmend

# --------------
# v1.01 Loader 2
# --------------
!loc 8046ad00
!asm

mflr r0
stw r0,0x4(sp)
stwu sp,-0x20(sp)
stw r31,0x1c(sp)
stw r30,0x18(sp)
stw r29,0x14(sp)
stw r28,0x10(sp)

#r7: pointer to strcpy table
#8045FB84 in v1.01

lis r7,0x8045
ori r7,r7,0xfb84

STRCPYLOOP:
lwz r4,0(r7)	#source
cmpwi r4,0
beq CODEHANDLER
lwz r3,4(r7)	#destination
lwz r5,8(r7)	#size

#copy string
subi r4,r4,4
subi r6,r3,4
addi r5,r5,4
b 0xc
lwzu r0,0x4(r4)
stwu r0,0x4(r6)
subic. r5,r5,4
bne+ -0xc

#next string
addi r7,r7,0xc
b STRCPYLOOP

CODEHANDLER:

#Hook codehandler
lis r3,0x8037
ori r3,r3,0x55c0
lis r4,0x4be1
ori r4,r4,0xb4d5
nop #stw r4,0(r3)
li r0,0
icbi r0,r3
sync
isync

#Zero fill entire nametag area
lis r3,0x8045
ori r3,r3,0xcb70
li r4,0
li r5,0
ori r5,r5,0xc344
lis r12,0x8000
ori r12,r12,0x3130
mtctr r12
bctrl

#Init nametag data
li r3,2
lis r12,0x8015
ori r12,r12,0xf37c
mtctr r12
bctrl

#Load data
lis r12,0x8001
ori r12,r12,0xcbbc
mtctr r12
bctrl

#Run codehandler once
lis r12,0x8019
ori r12,r12,0x0a98
li r4,0
icbi r4,r12
sync
isync
mtctr r12
bctrl

#Clear cache
lis r3,0x8000
lis r4,0x3c
lis r12,0x8032
ori r12,r12,0x8278
mtctr r12
bctrl

#80479050: scene controller, equivalent to 80479d30
li r3,6
lis r12,0x801a
ori r12,r12,0x3c44
mtctr r12
bctrl

li r0,5
sth r0,-0x4ad8(r13)
lwz r3,-0x4f80(r13)
lwz r3,0x8(r3)
li r30,0
stb r30,0(r3)

lis r12,0x801a
ori r12,r12,0x4518
mtctr r12
bctrl

lwz r0,0x24(sp)
lwz r31,0x1c(sp)
lwz r30,0x18(sp)
lwz r29,0x14(sp)
lwz r28,0x10(sp)
addi sp,sp,0x20
mtlr r0
blr

!asmend

# --------------
# v1.00 Loader 2
# --------------
!loc 8046ab00
!asm

mflr r0
stw r0,0x4(sp)
stwu sp,-0x20(sp)
stw r31,0x1c(sp)
stw r30,0x18(sp)
stw r29,0x14(sp)
stw r28,0x10(sp)

#r7: pointer to strcpy table
#8045E69C in v1.00

lis r7,0x8045
ori r7,r7,0xe69c

STRCPYLOOP:
lwz r4,0(r7)	#source
cmpwi r4,0
beq CODEHANDLER
lwz r3,4(r7)	#destination
lwz r5,8(r7)	#size

#copy string
subi r4,r4,4
subi r6,r3,4
addi r5,r5,4
b 0xc
lwzu r0,0x4(r4)
stwu r0,0x4(r6)
subic. r5,r5,4
bne+ -0xc

#next string
addi r7,r7,0xc
b STRCPYLOOP

CODEHANDLER:

#Hook codehandler
lis r3,0x8037
ori r3,r3,0x43ec
lis r4,0x4be1
ori r4,r4,0xbdf5
nop #stw r4,0(r3)
li r0,0
icbi r0,r3
sync
isync

#Zero fill entire nametag area
lis r3,0x8045
ori r3,r3,0xb888
li r4,0
li r5,0
ori r5,r5,0xc344
lis r12,0x8000
ori r12,r12,0x3130
mtctr r12
bctrl

#Init nametag data
li r3,2
lis r12,0x8015
ori r12,r12,0xed9c
mtctr r12
bctrl

#Load data
lis r12,0x8001
ori r12,r12,0xcb3c
mtctr r12
bctrl

#Run codehandler once
lis r12,0x8019
ori r12,r12,0x01e4
li r4,0
icbi r4,r12
sync
isync
mtctr r12
bctrl

#Clear cache
lis r3,0x8000
lis r4,0x3c
lis r12,0x8032
ori r12,r12,0x75ec
mtctr r12
bctrl

#80477d68: scene controller, equivalent to 80479d30
li r3,6
lis r12,0x801a
ori r12,r12,0x3544
mtctr r12
bctrl

li r0,5
sth r0,-0x4ad8(r13)
lwz r3,-0x4f80(r13)
lwz r3,0x8(r3)
li r30,0
stb r30,0(r3)

lis r12,0x801a
ori r12,r12,0x3e18
mtctr r12
bctrl

lwz r0,0x24(sp)
lwz r31,0x1c(sp)
lwz r30,0x18(sp)
lwz r29,0x14(sp)
lwz r28,0x10(sp)
addi sp,sp,0x20
mtlr r0
blr

!asmend

# Expand input HUD function
!loc 8045da00
3C 60 80 3F
60 63 D0 00 3C 80 81 74  38 A0 00 00 3C C0 01 01
39 00 00 00 39 20 00 00  39 40 00 00 39 60 00 00
7D 6A 19 2E 39 4A 00 04  2C 0A 00 34 41 80 FF F4
3C 80 81 74 1C 05 00 10  7C 80 22 14 90 63 FF FC
80 E4 00 00 7C E7 4A 14  90 E3 00 00 90 E3 00 1C
90 C3 00 04 80 E4 00 04  90 E3 00 08 80 E4 00 08
90 E3 00 0C 80 E4 00 0C  90 E3 00 10 90 E3 00 18
38 E0 00 80 98 E3 00 26  38 E3 FF CC 90 E3 00 2C
38 A5 00 01 38 63 00 34  39 40 00 00 2C 05 00 0B
41 80 FF 90 38 A0 00 00  39 08 00 01 2C 08 00 04
40 80 00 2C 2C 08 00 01  40 82 00 08 3D 20 00 80
2C 08 00 02 40 82 00 08  3D 20 01 90 2C 08 00 03
40 82 00 08 3D 20 02 10  4B FF FF 58 4E 80 00 20
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00

